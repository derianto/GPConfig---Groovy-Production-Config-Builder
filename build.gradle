import java.util.Map;
import groovy.lang.Binding;
import groovy.util.GroovyScriptEngine;

// List of supported commands:
//
// gradle tasks
// gradle dependencies
// gradle projects
//
// gradle idea
// gradle cleanIdea idea
//
//

// Configure this build script
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.linkedin:org.linkedin.gradle-plugins:1.5.0'
  }
}

apply plugin: 'idea'
apply plugin: 'org.linkedin.userConfig'
apply plugin: 'org.linkedin.spec'
apply plugin: 'java'

apply from: 'common.gradle'

// ---------------- PLAYGROUND -----------------

// Read Groovy from Groovy
task test1 << {
  String[] dirs = [ winOrUnixPath("./config/_default") ]
  GroovyScriptEngine gse = new GroovyScriptEngine(dirs)
  Binding binding = new Binding()
  binding.setVariable("prop2", "world")
  gse.run("_default.groovy", binding)
  println(binding.getVariable("prop1"))
  def map = binding.getVariable("properties")
  println("map = $map")
  println("map.keySet = " + map.keySet())
  println("map class = " + map.getClass())
}

// Appending to map
task test2 << {
  // Check properties
  println("hasProperty(\"releaseEnvironment\") = ${project.hasProperty('releaseEnvironment')}")
  println("hasProperty(\"releaseNode\") = ${project.hasProperty('releaseNode')}")
  println("hasProperty(\"releaseEnvironment2\") = ${project.hasProperty('releaseEnvironment2')}")

  map1 = new HashMap();
  map1 += [
    "key1": "value1"
  ]
  map1 += [
    "key2": "value2 ${map1.key1}"
  ]
  map1 += [
    "key1": "${map1.key1} added something"
  ]
  map1 << [
    "key2": "${map1.key2} added something again"
  ]

  println("releaseEnvironment = $releaseEnvironment")
  println("releaseNode = $releaseNode")
  println("map = $map1");
}

// --------- END OF PLAYGROUND -----------------

subprojects {
  sourceCompatibility = '1.6'
  targetCompatibility = '1.6'

  // Common dependencies that we are sure everyone absolutely needs
  // Will be executed for every project.  Then each project can append to it.
  dependencies {
    testCompile spec.external.junit
    compile spec.external.log4j

    // For JSP.  providedCompile / providedRuntime means not added to the WAR archive
    providedCompile 'org.mortbay.jetty:jsp-api-2.1:6.1.14'
    providedCompile 'org.mortbay.jetty:jsp-2.1:6.1.14'
    runtime 'org.apache.tomcat:jasper:6.0.18'
  }
}
